<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JFrog Devops Hands-On Lab on JFrog Workshop</title>
    <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab.html</link>
    <description>Recent content in JFrog Devops Hands-On Lab on JFrog Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language><atom:link href="https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fork the Lab Repositories</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/1_fork_workshop_repos.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/1_fork_workshop_repos.html</guid>
      <description>To get started, you will need to fork two GitHub repositories. These repositories contain the files that are needed for the lab.
 https://github.com/shimib/Hoare - Contains our JFrog pipelines for configuring our Artifactory server and building our Java webapp and NPM user interface.
 https://github.com/shimib/project-examples - Contains our webapp code which consists of the Java webapp and NPM user interface.
   Navigate to each of these repositories GitHub using the links above and fork them to your account.</description>
    </item>
    
    <item>
      <title>Configure the GitHub Integration</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/10_configure_github_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/10_configure_github_integration.html</guid>
      <description>In order for JFrog Pipelines, to get access to the code in your new repositories, we must first set up a Pipelines GitHub integration. This allows Pipelines to authenticate and get access to your GitHub repositories. To do this, we create a GitHub Personal Access Token with the correct permissions.
 Go to your GitHub Personal Access Tokens settings page. Click on Generate new token. Provide a name for the token.</description>
    </item>
    
    <item>
      <title>Configure the Artifactory Integration</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/20_configure_artifactory_integration.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/20_configure_artifactory_integration.html</guid>
      <description>Similar to the GitHub Integration, in the following steps you will configure an Artifactory Integration that allows JFrog Pipelines to also access your Artifactory repositories in order to publish your artifacts and build info. You will do this by creating an API key.
Artifactory offers a universal solution supporting all major package formats including Alpine, Maven, Gradle, Docker, Conda, Conan, Debian, Go, Helm, Vagrant, YUM, P2, Ivy, NuGet, PHP, NPM, RubyGems, PyPI, Bower, CocoaPods, GitLFS, Opkg, SBT and more.</description>
    </item>
    
    <item>
      <title>Configure the Initialization Pipeline</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/30_configure_initialization_pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/30_configure_initialization_pipeline.html</guid>
      <description>Next, we will update the lab pipelines to add your new GitHub and Artifactory integrations. In previous steps, you forked and cloned the lab repositories. We will modify the initialization pipeline in your forked Hoare repository to add these integrations.
 In your local git directory, open Hoare/pipelines/base_init.yml in an editor. Update the resources section of the file to use your forked repositories. Change the path to use your username.</description>
    </item>
    
    <item>
      <title>Configure the Pipeline Source</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/40_configure_pipeline_source.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/40_configure_pipeline_source.html</guid>
      <description>In these next steps, we will add the previous pipelines as a JFrog Pipelines source. This will allow JFrog Pipelines to executes these pipelines automatically whenever there is a commit or manually as needed.
A Pipeline Source represents a source control repository (such as GitHub or BitBucket) where Pipelines definition files can be found. A pipeline source connects to the repository through an integration.   In your JFrog Platform instance, go to Pipelines â–º Pipeline Sources.</description>
    </item>
    
    <item>
      <title>Execute the Initialization Pipeline</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/50_execute_initialization_pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/50_execute_initialization_pipeline.html</guid>
      <description>The first pipeline that we will execute will initialize our environment. This pipeline will create users, groups, permissions, repositories, Xray policies and watches, Xray indexes and access federation. This prepares our JFrog Platform instance to run our gradle and npm build pipelines.
This pipeline initializes the JFrog Platform for the next build pipelines by creating the necessary users, repositories, permissions and Xray configuration. It does this by using the JFrog Platform REST APIs.</description>
    </item>
    
    <item>
      <title>Execute the Gradle Build Pipeline</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/60_execute_gradle_build_pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/60_execute_gradle_build_pipeline.html</guid>
      <description>Our first build pipeline is a Gradle pipeline that builds our Java web app. This pipeline uses a GradleBuild native Pipelines step to compile and build the code. DockerBuild and DockerPush native steps are used to build a Docker image and push it to Artifactory. It then scans the build using the XrayScan native step. Then it pushes the produced artifacts to the staging repository in Artifactory along with all build information by using the PromoteBuild native step.</description>
    </item>
    
    <item>
      <title>Execute the NPM Build Pipeline</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/70_execute_npm_build_pipeline.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/70_execute_npm_build_pipeline.html</guid>
      <description>Our second build pipeline is a NPM pipeline that builds our user interface that connects to our previously built Gradle Java webapp. This pipeline uses a NpmBuild native Pipelines step build the user interface components. Then it uses a generic Bash step to package the components. Next, it uses NpmBuild to publish the components. Finally, similar to the Gradle build, DockerBuild, DockerPush, XrayScan and PromoteBuild are used to promote a final docker image to the staging repository.</description>
    </item>
    
    <item>
      <title>Conclusion</title>
      <link>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/80_conclusion.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jefferyfry.github.io/awsworkshop/70_jfrog_devops_hands-on_lab/80_conclusion.html</guid>
      <description>In this workshop, we demonstrated using the JFrog Platform to create CI/CD pipelines to build an application, manage the artifacts, scan the artifacts for security vulnerabilities and license compliance, and publish the artifacts to a staging repository. Now that you have some basic understanding of the JFrog Platform, we encourage you to use it with your existing build tools, like Maven, Gradle, Ivy and Ant and work with packaging systems of other development platforms, like NuGet, RubyGems or NPM.</description>
    </item>
    
  </channel>
</rss>
